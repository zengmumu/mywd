CMD 命令
1， 切换盘符   c：+回车（enter）  d：+回车
2， 切换目录   cd 路径 回车
3， 转向上一级 cd ../
4,  转向根目录 cd /
5， 查看当前目录下得文件夹或者文件    dir
6， 清屏  cls
7， 重复上一次命令   光标上箭头
8， 查看 ip  ipconfig
9， 查看网络服务器通信   ping   www.baidu.com
10  如果路径太长 可以先复制路径 再在命令窗口 右键 完成粘贴

---------------------------------------------git 命令
git init  初始化 项目
git add  note.txt   把 note 文件添加到git 项目仓库中 （我的git 只认note.txt 文件）

git commit -m "一次伟大的提交"
向git 仓库中提交  文件 明确注释为 "一次伟大的提交"

git status 项目现在的状态
git diff   查看文件发送的状态

-----------------------------------------
在没有 commit 怎么 回退
git checkout note.txt  


git log 显示提交的次数

git help 显示帮助列表
git log --pretty=oneline
用一行的方式显示提交信息

---------------------------------------------
已经提交了，怎么样回到上一次 提交的状态
git reset --hard HEAD^^
(HEAD^)现在
 HEAD~100 后退100步
git reset --hard a27e （回退到指定的版本）

git reflog 所有的提交信息



 repository 项目仓库  

 start Project 开始项目（右边灰色的按钮）

 create repository 创建 项目仓库

------------------------------------------配置钥匙
settings 设置
Deploy keys 设置钥匙
c:/Users/mumu/.ssh/

-------------------本地推送到服务器
git remote add origin git@github.com:zengmumu/mywd.git
    远程   添加 源文件  
git push -u origin master
把本地的文件推送到远程  master（主分支

git add . 添加所有文件
git commit -m "提交"
git push origin master


-----------------------------项目主页（可以真实的展示 200M 免费空间 可以做个人网站）

1，添加一个 gh-pages 分支
2，setting  找到地址 
问题 加载太慢  文件要压缩 多一个src 不爽

3，git checkout -b gh-pages  在本地创建一个gh-pages分支
4，git branch 查看分支
5，git pull origin gh-pages  把远程分支 内容 拉到本地 并且和本地分支合并


-----------------------------本地分支和远程分支不一样 怎样同步
1， 先添加 git add .
2,  提交   git commit -m "解释"
3， 推送到远程  git push origin  gh-pages

----------------------------切换到主分支 明天做项目
git checkout 分支名称


----------------------------合并分支
git merge master            把master 合并到 当前分支

----------------------------本地文件和服务器文件不一致时候是提交不上去
办法：
1，先pull 下来
2，看冲突  
	>>>>>> HEAD 本地当前
	=============
	服务器上的
	5dlakjsdfasdf545 commit
3, 删除冲突

4，先添加  在提交  push

注意：本地修改前先push
	



$scope.$watch("name",function(o,n){},true)
$scope.$emit("name",{})
$scope.$on("name",function(event,data){})



	1,配置产品详情的路由
	2，当单击产品列表 切换路由并传递 产品的id值给详情页面
	3，当到达产品详情页面，获取 传递过来的值 通过ajax 来获详情的数据

	----------------------如果通过js代码切换路由
	$state.go("路由名称"，传递数据)

	----------------------详情页面接收数据

	$stateParams.名称

-------------------------------------------------------购买
1，单击购买按钮时候
1，有没有登陆
	2.1如果没有登陆 跳转到登陆页面
	2.2 如果登陆 检查该用户的风险评估值
		2.2.1如果没有风险评估开始进行风险评估
		2.2.2如果风险 开始购买

-------------------------------------------------------
配置一个路由tabs
配置一个子路由 tabs.home
配置一个带参数的路由

----------------------------------
配置
state("name",{
	url:"detail/{id:\d{1,10}}"，
	templateUrl:"url地址"
})

切换
$state.go("name",{id:Id})

获取
$stateParams.id


---------------------------------历史记录
$ionicHistory  所有的历史相关
$ionicHistory.goBack()返回上一个状态
$ionicHistory.forwardView() 历史记录中可以前进的状态
$ionicHistory.backView() 历史记录中一个可以返回的状态
$ionicHistory.backView().stateId  状态的id
				view的historyid 
$ionicHistory.goToHistoryRoot("ion1") 根据历史记录id来跳转  ion1 默认的根状态


-----------------------------------模态框
1，创建模态框
$ionicModal.formTemplateUrl(url,{scope:$scope})
.then(function(res){$scope.modalRisk=res})

2， 模板准备
<ion-modal-view>
	内容
</ion-modal-view>
3， 显示模块
$scope.modalRisk.show();

通过服务来存取每个问题的成绩
wdserver.riskScore=[]

wdserver.riskScore[0]=5;

wdserver.riskScore[1]=4;


-------------------------双师课堂
优秀的讲师-课程-案例可以复用
-------------------------一个基础的双师课程需要什么
1，咱们们排除掉硬件因素
2，我们需要一名优秀的讲师在班级讲课
3，需要把老师讲课内容复制到另外一个半
-------------------------我们能复制那些
A 老师讲的课程
B 老师布置的作业
C 老上课与学生的交互，与情感交流（这个是复制不成功的）


----------------------------------数组方法
push  后加
pop   后删

shift   前删
unshift 前加

splice（从第几个，删除几个，添加的内容）
slice（从第几个，切到第几个）不破坏原来的数据

A.concat(B) A和B合并为一个数组

join(",") 把数组转换为字符串
JSON.stringify(Arr) 转换为字符串

sort() 排序
sort(function(a,b){if(a>b){return 1}else{return -1}})
reverse()反转


---------------------------数组的遍历

for(var k in arr){
	console.log(k,arr[k])
}

for(var i=0;i<arr.length;i++){
	console.log(arr[i])
}

for (var value of myArray) {   
    console.log(value);   
}  

这是目前遍历数组最简洁和直接的语法；
它避免了for-in的所有缺陷；
与forEach()不一样，它支持break，continue和return。


myArray.forEach(function (value,index,arr) {   
    console.log(value,index,arr);  
 });
你不能用break语句跳出循环且不能在这个封闭的函数内使用return语句。

// 过滤，筛选
arr.filter(function(elem,index){
	return 条件
})


arr.reduce(function(a,b){
	return a*10+b;
})

arr.map(function(a){
	return a*2;
})

split 把字符串转换为数据



-----promise 承诺委托
1，拿点礼物去搞定岳父岳母，
	成功
		搞定-大伯买烟
			成功
				化妆品搞定小姨子
					成功
						鲜花，房子，车，
							最终求婚成功
					失败
			失败

	失败
2，
	if（搞定岳父）{
		if(搞定-大伯){
				if(搞定小姨子)	{
						if（金钱物质）{
							求婚成功，
							
						}
					
					}
		
			}else{

			}

		}else{

		}
	if（搞定岳父）
	.then()
	.then()
	.then()
	.then(funtion(rs){
	
	})

//--------------------------------es6 原生
promise承诺委托
1,resolve(data)
2,reject(有问题钱不够)

var q=new Promise(resolve,reject,){
	if（买到）{
		resolve(东西)
	}else{
		reject("钱不够。。。。")
	}
}

q.then(function(东西){
	console.log(东西)
})
.catch(function(err){
	console.log(err);	
})

// ------------------------------------------angular 中的promise
var q=$q.defer();//建立延期任务
q.resolve(data)解决
q.reject(err)拒绝
返回
return q.promise;//返回承诺

用的时候
q.promise.then(function(){},function(){})
第个为success
第二个err



---------------------------------------------手机中的事件
touchstart 开始触摸
touchmove  滑动
touchend    结束触摸
targetTouches[0]  获取第一个根手指
targetTouches[0].pageY	相对应页面
		.pageX	
		.clientX相对于视口 viewport
		.clientY

---------------------------------Scroller（）

1，初始化
2，创建Dom
	包裹一层dom
3，绑定事件
	touchstart 开始触摸
	touchmove  滑动
	touchend    结束触摸

Create New Repository
	
新建仓库
Clone Existing Repository
克隆仓库
Open Existing Repository
打开仓库




















